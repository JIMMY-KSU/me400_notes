{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Lecture 28 - Numerical Solutions of First-Order Systems\n",
    "\n",
    "## Overview, Objectives, and Key Terms\n",
    " \n",
    "This lesson is a direct extension of [Lecture 27](ME400_Lecture_27.ipynb), in which the focus was the numerical solution of first-order IVPs.  Here, those techniques are extended to *systems* of first-order equations."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Homework 11 Recap\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "```python\n",
    "def C_p(T):\n",
    "    \"\"\"Heat capacity for O_2 as given in problem statement.\n",
    "    \"\"\"\n",
    "    A = 31.32234; B=-20.23531; C=57.86644; D=-36.50624; E =-0.007374\n",
    "    t = T/1000\n",
    "    return A + B*t + C*t**2 + D*t**3 + E/t**2\n",
    "\n",
    "def mean_C_p():\n",
    "    \"\"\"Compute mean of C_p(T) over T in [100, 700]\n",
    "    \"\"\"\n",
    "    return quad(C_p, 100.0, 700.0)[0]/600.0\n",
    "    \n",
    "def T_C_p_avg():\n",
    "    \"\"\"Determine temperature T such that C_p(T) equals mean(C_p(T)).\n",
    "    \"\"\"\n",
    "    return fsolve(lambda x: mean_C_p() - C_p(x), x0=400.0)[0]\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "```python\n",
    "def model_mu(T, coeffs):\n",
    "    \"\"\"Model for mu(T) with coefficients.\n",
    "    \"\"\"\n",
    "    a, b, c = coeffs\n",
    "    return b*np.exp(a*T) + c\n",
    "    \n",
    "def get_best_coeffs():\n",
    "    \"\"\"Generate the best coefficients for model_mu using curve_fit.\n",
    "    \"\"\"\n",
    "    T, nu, mu = read_viscosity()\n",
    "    a, b, c = -0.01, 0.016, 0\n",
    "    foo = lambda w, x, y, z: model_mu(w, [x, y, z])\n",
    "    a, b, c = curve_fit(foo, T, mu, p0=(a, b, c))[0]\n",
    "    return a, b, c\n",
    "    \n",
    "a, b, c = get_best_coeffs()\n",
    "best_coeffs = [a, b, c]\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Objectives\n",
    "\n",
    "By the end of this lesson, you should be able to\n",
    "\n",
    "- Set up and solve simple linear systems *numerically* using NumPy.\n",
    "- Solve systems of first-order IVPs numerically using forward and backward Euler's method\n",
    "- Solve systems of first-order IVPs using `odeint`\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Prerequisites\n",
    "\n",
    "You should already be able to\n",
    "\n",
    "- Solve IVPs using Euler's method based on the material of [Lecture 27](ME400_Lecture_27.ipynb)\n",
    "- Define one- and two-dimensional arrays using NumPy arrays based on the material of [Lecture 4](ME400_Lecture_4.ipynb).  \n",
    "- Use `np.linalg.solve` to solve $\\mathbf{Ax = b}$ based on the material of [Lecture 4](ME400_Lecture_4.ipynb).\n",
    "\n",
    "Please review these topics (and resources) as needed.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Key Terms\n",
    "\n",
    "- `odeint`\n",
    "- first-order system"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "**Example**:  Solve the following system\n",
    "\n",
    "$$\n",
    "\\left [ \\begin{array}{rrrrr}\n",
    "  -2    &  1  & 0 & \\ddots \\\\\n",
    "   1   &  -2 & 1 & 0 & \\ddots \\\\\n",
    "   0   &  1 & -2 & 1 & \\ddots \\\\\n",
    "       &  &  & \\ddots & \\\\\n",
    "       & & &            1 & -2\n",
    "\\end{array} \\right ]\n",
    "\\left [ \\begin{array}{c}\n",
    "  x_0 \\\\\n",
    "  x_1 \\\\\n",
    "  \\vdots \\\\\n",
    "  x_n \\\\\n",
    "\\end{array} \\right ]\n",
    "=\n",
    "\\left [ \\begin{array}{c}\n",
    "  1 \\\\\n",
    "  1 \\\\\n",
    "  \\vdots \\\\\n",
    "  1\n",
    "\\end{array} \\right ]\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Example**:  For $\\Delta = 0.1$, compute $x(10)$ and $y(10)$ by solving the following system using (1) forward Euler, (2) backward Euler, and (3) `odeint`:\n",
    "\n",
    "$$\n",
    "\\left [ \\begin{array}{c}\n",
    "  x' \\\\\n",
    "  y' \n",
    "\\end{array} \\right ]\n",
    "= \n",
    "\\left [ \\begin{array}{rr}\n",
    "  -10   &  0.00 \\\\\n",
    "   10   & -0.01 \\\\\n",
    "\\end{array} \\right ]\n",
    "\\left [ \\begin{array}{c}\n",
    "  x(t) \\\\\n",
    "  y(t)\n",
    "\\end{array} \\right ]\n",
    "+\n",
    "\\left [ \\begin{array}{c}\n",
    "  1 \\\\\n",
    "  0\n",
    "\\end{array} \\right ]\n",
    "$$\n",
    "\n",
    "for $x(0) = y(0) = 0$."
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Slideshow",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
