{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# ME 400 Lecture 1 - Getting Started\n",
    "\n",
    "First, a brief overview of the [Syllabus](../administrivia/ME400_Syllabus.ipynb)!  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "from IPython.core.interactiveshell import InteractiveShell \n",
    "InteractiveShell.ast_node_interactivity = \"all\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## Contact Information\n",
    "\n",
    "- **Lecture** MW 1:30--2:20pm, DUE 1073\n",
    "- **Instructor**: Jeremy Roberts\n",
    "  - *Phone*: 785-532-7182\n",
    "  - *Email*: jaroberts@ksu.edu\n",
    "  - *Office*: Ward 137D\n",
    "  - *Office Hours*: M/W, 2:30-4:00pm (or by appointment; refer to my [calendar](https://calendar.google.com/calendar/embed?src=j.alyn.roberts%40gmail.com&ctz=America/Chicago) before suggesting a time)\n",
    "- **GTAs**: Will Asher and John Boyington\n",
    "- **UTAs**: Cole Hoing, Keith Huddleston, and Sam Oxandale"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**From the catalog**: The development and application of computer techniques to the problems of design and analysis in mechanical engineering, including computer programming (abstraction and problem solving; algorithms; control structures; input/output; functions; arrays and array processing).\n",
    "\n",
    "**My informal description**: ME 400 is all about teaching you, the student, how to use programming to solve problems. We’ll use the Python programming language, which is as easy a language to learn as any I’ve encountered. The Python language offers much more with all of the add-on packages available, all for free. What you will come out of the class with, at the least, is (1) a basic ability to understand, implement, and debug computer programs and (2) knowledge of tools (symbolic and numerical) within the Python ecosystem that can be used to solve engineering problems."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## Textbook\n",
    "\n",
    "**No book required**\n",
    "\n",
    "Online notes: [robertsj.github.io/me400_notes](http://robertsj.github.io/me400_notes)\n",
    "\n",
    "\n",
    "Other good resources:\n",
    " - [Object-Oriented Programming in Python](http://python-textbok.readthedocs.io/en/latest/index.html)\n",
    " - Downey, Allen, Jeffrey Elkner, and Chris Meyers. *How to Think Like a Computer \n",
    "   Scientist: Learning with Python*. Green Tea Press, 2002. ISBN: 9780971677500.  \n",
    "   (This book is available for [free as a PDF](http://www.greenteapress.com/thinkpython/thinkCSpy.pdf), \n",
    "   or you may purchase a paper copy.)\n",
    " - Shapiro, Bruce. *Scientific Computation: Python Hacking for Math Junkies*. \n",
    "   Sherwood Forest Books, 2015. ISBN: 9780692366936.\n",
    " - Stewert, John. *Python for Scientists*. Cambridge University Press. ISBN: 9781107686427.\n",
    " - [www.python.org](http://www.python.org)\n",
    " - [www.scipy.org](http://www.scipy.org)\n",
    " - [www.scipy.org](http://www.sympy.org)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## Amount of Study Required\n",
    "\n",
    "**6 to 9 hours per week** of active study outside class for the average student to earn the average grade."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## Lectures\n",
    "\n",
    "Your job is to **come to lecture prepared** to learn and to engage in any in-class activities.  \n",
    "\n",
    "Every lecture has a **pre-lecture activity** (almost always a Canvas quiz) due one hour before lecture.  Unless otherwise noted, quizzes allow up to two attempts.\n",
    "\n",
    "**No phones**, but laptops okay if used for examples."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## Assessment\n",
    "\n",
    "- Pre-Lecture Activities (10%)\n",
    "- Laboratory Exercises (10%)\n",
    "- Homework Exercises (20%)\n",
    "- Examinations (60%)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## Course Schedule\n",
    "\n",
    "| Lecture   |  Date            | Topics                                                                      | \n",
    "|----|-------------------------|-----------------------------------------------------------------------------| \n",
    "| 1  | Monday, August 21       | Administrivia. Overview of Python. Spyder and Jupyter. Basic types.         | \n",
    "| 2  | Wednesday, August 23    | Basic operators and common, built-in functions.                             | \n",
    "| 3  | Monday, August 28       | Basic data processing with NumPy and Matplotlib.                            | \n",
    "| 4  | Wednesday, August 30    | More on NumPy arrays.  Slicing operations.  np.linalg                       | \n",
    "\n",
    "Thereafter:\n",
    "- lectures 5-11 on elementary programming concepts (e.g., algorithms, `if` statements, `for` loops, and container types)\n",
    "- lectures 12-17 on modular programming (e.g., `function` definitions and `modules`)\n",
    "- lectures 18-29 on applications (e.g., symbolic computing, optimization, curve fitting)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Overview, Objectives, and Key Terms\n",
    "\n",
    "In this lesson, we'll walk through the installation of, access to, and use \n",
    "of Python."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Objectives\n",
    "\n",
    "By the end of this lesson$^*$, you should be able to\n",
    "\n",
    "- *access Python on departmental machines* (or your own machine)\n",
    "- *define variables using basic Python types*\n",
    "- *explain what a variable is*\n",
    "\n",
    "(*Lecture slides and other content used in class may (1) include only parts of the required, online reading and (2) provide materials beyond the reading.  In this class, \"lesson\" refers to the coupled reading/lecture pair.)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Key Terms\n",
    "\n",
    "- interpreted programming language\n",
    "- compiled programming language\n",
    "- integrated development environment\n",
    "- Spyder\n",
    "- Jupyter notebook\n",
    "- variable\n",
    "- `int`\n",
    "- `float`\n",
    "- `str`\n",
    "- `bool`\n",
    "- assignment "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Overview of Python\n",
    "\n",
    "Python is a scripting language, which means \n",
    "it is [interpreted](https://en.wikipedia.org/wiki/Interpreted_language)\n",
    "and not [compiled](https://en.wikipedia.org/wiki/Compiled_language).\n",
    "\n",
    "Interpreted languages are converted from human-readable text files to binary \n",
    "(i.e., the 1's and 0's a computer understands) on-the-fly.  \n",
    "\n",
    "A compiled language is converted to binary once-and-for all by an \n",
    "explicit compilation step.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "Several versions of Python are in current use, but the most popular versions \n",
    "are 2.7 and 3.6.  Despite the numbering, both versions are current \n",
    "(but [not forever](https://pythonclock.org/)).  \n",
    "\n",
    "In this class, **we will work exclusively with Python 3.6**."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Accessing Python\n",
    "\n",
    "For folks who want to install Python on their own machines, the Conda folks have provided an\n",
    "[installation guide for all operating systems](https://conda.io/docs/install/full.html).\n",
    "\n",
    "Conda is installed on MNE machines---see the online notes to get an early start, or wait until Lab 1."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Interactive Python via IDLE\n",
    "\n",
    "In the CMD window (or, on OS X, the terminal), type \"python\" and press enter to open Python.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Spyder\n",
    "\n",
    "The recommended way to use Python in ME 400 is Spyder, an [integrated development environment](https://en.wikipedia.org/wiki/Integrated_development_environment)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Jupyter Notebook\n",
    "\n",
    "Another way to interact with Python is through use of [Jupyter notebooks](http://jupyter.org/).  Jupyter allows one to produce documents within a web browser that contain text, images, links, and, of course, Python code.  In fact, these online materials were all produced using the notebook format and converted to the form you are now seeing! "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Basic Types\n",
    "\n",
    "\n",
    "Python uses [variables](https://en.wikipedia.org/wiki/Variable_%28computer_science%29), which consist of a *name* to which a *value*\n",
    "can be *assigned*. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "x = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "y = 1.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "z = '1.0'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "Are these all the same?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "'1.0'"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x\n",
    "y\n",
    "z"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "int"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "float"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(x)\n",
    "type(y)\n",
    "type(z)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "> **Note**: `str` values can be defined with `''` or `\"\"` but not `'\"` or `\"'`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "One last `type`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "b = True"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "> **Warning**: The value of a `bool` is either `True` or `False` and the *capitalization* is *required*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "We can change a value of one type to another."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "float"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "z = float(z)\n",
    "z\n",
    "type(z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bool(1)\n",
    "bool('a')\n",
    "bool(0.0) \n",
    "bool('')\n",
    "bool(None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "For conversion to `bool`, `0` and its cousins like `0.0`, the empty string `''`, and the special `None` value all evaluate to `False`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "Throughout, use of `=` is as the *assignment operator*, which gives *values* to *names* (i.e., defines **variables**)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Recap\n",
    "\n",
    "By this time, you should be able to\n",
    "\n",
    "- *access Python on departmental machines* (or your own machine)\n",
    "- *define variables using basic Python types*\n",
    "- *explain what a variable is*\n",
    "\n",
    "Today's pre-lecture quiz is special and can be completed by 11:59 pm tonight.  Be sure to do all activities by 12:30 pm each lecture day.\n",
    "\n",
    "**Questions?**"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Slideshow",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
