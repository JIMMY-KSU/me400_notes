{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Lecture 25 - Data Analysis via Interpolation \n",
    "\n",
    "## Overview, Objectives, and Key Terms\n",
    " \n",
    "In this lecture, we continue the theme of data analysis initiated in [Lecture 24](ME400_Lecture_24.ipynb), focusing now on the process of **interpolation**.  Whereas the fitted models of [Lecture 24](ME400_Lecture_24.ipynb) allow one to produce simple models from noisy (or otherwise complicated) data, interpolation allows one to estimate new values from known discrete points that are assumed to be noise free."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Objectives\n",
    "\n",
    "By the end of this lesson, you should be able to\n",
    "\n",
    "- Apply linear interpolation to evaluate $f(x)$ given discrete points $(x_i, f(x_i))$ for $i = 0, 1 \\ldots$.\n",
    "- Apply linear interpolation to evaluate $f(x, y)$ given discrete points $(x_i, y_j, f(x_i, y_j))$ for $\\, i = 0, 1, \\ldots$ and $j = 0, 1,\\ldots$.\n",
    "- Apply tools from NumPy and SciPy to perform high-order (e.g., cubine-spline) interpolation \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Key Terms\n",
    "\n",
    "- linear interpolation\n",
    "- `np.interp`\n",
    "- `scipy.interpolate`\n",
    "- `interp1d`\n",
    "- `interp2d`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Simple Linear Interpolation\n",
    "\n",
    "A common task in many thermal engineering courses is to use tabulated physical properties.  Often, the value needed is not in the table, and *linear interpolation* is required to estimate the missing value.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "**Classical**: interpolate between two pairs $(x_0, y_0)$ and $(x_1, y_1)$ by finding a slope and intercept.  *Fine, but it gets old.*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "**Alternative**:  the teeter-totter analogy (and the path to *barycentric* interpolation)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "Barycentric interpolation in 1-D:\n",
    "\n",
    "$$\n",
    "\\begin{split}\n",
    "f(x) &= f(a) + \\frac{f(b) - f(a)}{b - a} (x - a) \\\\\n",
    "     &= f(a) \\left ( \\frac{b - x}{b - a} \\right ) + f(b) \\left( \\frac{x - a}{b - a} \\right ) \\\\ \n",
    "     &= f(a) w_a + f(b) w_b \\, .\n",
    "\\end{split}\n",
    "$$\n",
    "\n",
    "Note, $w_a + w_b = 1$ (as we might expect)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Exercise**:  Consider the following table of thermodynamic data for saturated steam (saved as [thermo_data.txt](thermo_data.txt)):\n",
    "\n",
    "```\n",
    "  T [K]   P [MPa]  h_l [kJ/kg] h_v [kJ/kg]\n",
    " 373.150   0.101    2675.572     419.099\n",
    " 389.817   0.179    2701.054     489.625\n",
    " 406.483   0.298    2724.633     560.634\n",
    " 423.150   0.476    2745.919     632.252\n",
    " 439.817   0.730    2764.528     704.626\n",
    " 456.483   1.082    2780.059     777.934\n",
    " 473.150   1.555    2792.062     852.393\n",
    " 489.817   2.175    2800.004     928.269\n",
    " 506.483   2.972    2803.247    1005.893\n",
    " 523.150   3.976    2801.012    1085.687\n",
    " 539.817   5.222    2792.314    1168.202\n",
    " 556.483   6.745    2775.820    1254.194\n",
    " 573.150   8.588    2749.574    1344.771\n",
    "```\n",
    "Write a function that loads this data and returns $h_v$ for any value of $P \\in [0.101, 8.588]$ using linear interpolation."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Exercise**: What about for $P < 1.01$ or $P > 8.588$?  How can we still apply the model $y(t) = ax + b$?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Interpolation In Two Dimensions\n",
    "\n",
    "Some applications require interpolation of two-dimensional data evaluated at $(x_i, y_j)$ for $i=0,1,\\ldots$ and $ j=0,1,\\ldots$.  \n",
    "\n",
    "Linear interpolation of such data is based on the model $f(x, y) \\approx ax + by + c$ for $x \\in [x_i, x_{i+1}]$ and $y \\in [y_j, y_{j+1}]$.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Exercise**: Consider the following table of water densities ($\\rho$) for different temperatures [K] and pressures [MPa] (from [thermodata_2.txt](thermodata_2.txt)):\n",
    "\n",
    "```\n",
    "  T [K]   P [MPa]  rho [kg/m^3]\n",
    " 293.150   2.000    999.073\n",
    " 293.150   4.000    999.982\n",
    " 293.150   6.000   1000.888\n",
    " 293.150   8.000   1001.791\n",
    " 313.150   2.000    993.053\n",
    " 313.150   4.000    993.924\n",
    " 313.150   6.000    994.790\n",
    " 313.150   8.000    995.653\n",
    " 333.150   2.000    984.037\n",
    " 333.150   4.000    984.903\n",
    " 333.150   6.000    985.766\n",
    " 333.150   8.000    986.625\n",
    " 353.150   2.000    972.650\n",
    " 353.150   4.000    973.538\n",
    " 353.150   6.000    974.422\n",
    " 353.150   8.000    975.301\n",
    " 373.150   2.000    959.242\n",
    " 373.150   4.000    960.172\n",
    " 373.150   6.000    961.097\n",
    " 373.150   8.000    962.017\n",
    "```\n",
    "Use linear interpolation to estimate $\\rho(T, P)$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "What about interpolating arbitrary $f(x_i, y_i)$ points?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Higher-Order Interpolation\n",
    "\n",
    "Linear interpolation is conceptually straightforward, but it helps to use tools like `np.interp` (see the exercises above).  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "Interpolation that is *better* than linear is often defined via *interpolating splines*:\n",
    "\n",
    "Linear:\n",
    "  - $y(x) = a_i x + b_i, \\quad x \\in [x_i, x_{i+1}]$\n",
    "  - piece-wise continuous $y(x)$\n",
    "  - $y(x_i)$ matches $y_i$ for all $i$\n",
    "  \n",
    "Quadratic:\n",
    "  - $y(x) = a_i x^2 + b_i x + c_i, \\quad \\in [x_i, x_{i+1}]$\n",
    "  - piece-wise continuous $y(x)$ \n",
    "  - continuous $y'_i(x_{i+1}) = y'_{i+1}(x_{i+1})$\n",
    "  - how many equations? how many unknowns?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "Interpolation that is *better* than linear is more challenging to implement, and we'll turn to the `scipy.interpolate` module and its `interp1d` and `interp2d` utilities.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "**Exercise**: Revisit $P(T)$ and interpolate using quadratic interpolation."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "**Exercise**: Revisit $\\rho(T, P)$ and interpolate using cubic interpolation."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Recap\n",
    "\n",
    "You should now be able to:\n",
    "\n",
    "- Apply linear interpolation to evaluate $f(x)$ given discrete points $(x_i, f(x_i))$ for $i = 0, 1 \\ldots$.\n",
    "- Apply linear interpolation to evaluate $f(x, y)$ given discrete points $(x_i, y_j, f(x_i, y_j))$ for $\\, i = 0, 1, \\ldots$ and $j = 0, 1,\\ldots$.\n",
    "- Apply tools from NumPy and SciPy to perform high-order (e.g., cubine-spline) interpolation "
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Slideshow",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
