{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Lecture 2 - Basic Operators and Built-In Functions\n",
    "\n",
    "## Overview, Objectives, and Key Terms\n",
    "\n",
    "In this lesson, we'll continue our study of basic types from [Lecture 1](ME400_Lecture_1.ipynb), incorporating operators (arithmetic and otherwise) along with some very useful built-in functions.  By the end, we'll construct our very first (albeit, simple) [program](https://en.wikipedia.org/wiki/Computer_program)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "from IPython.core.interactiveshell import InteractiveShell \n",
    "InteractiveShell.ast_node_interactivity = \"all\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Objectives\n",
    "\n",
    "By the end of this lesson, you should be able to\n",
    "\n",
    "- *add, subtract, multiply, and divide* two quantities\n",
    "- *use the `help()` function to understand how to use another function*\n",
    "- *use `dir()` and the `variable explorer` to see defined variables and their values*\n",
    "- *explain the difference between statement and expression*\n",
    "- *write a short, well-commented program*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Key Terms\n",
    "\n",
    "- statement\n",
    "- expression\n",
    "- variable explorer\n",
    "- keywords\n",
    "- `import`\n",
    "- `math` module\n",
    "- `dir()`\n",
    "- `help()`\n",
    "- `print()`\n",
    "- `type()`\n",
    "- `+`, `-`, `*`, `/`, `**`, `//`, `^`\n",
    "- flowchart\n",
    "- comments and the `#` symbol"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Python Operators \n",
    "\n",
    "In  [Lecture 1](ME400_Lecture_1.ipynb), we saw several examples of the form `a = 1`, where the variable `a` is *assigned* the value `1`.  Here, `=` is the *assignment* operator.  The entire line of code `a = 1` is a *statement*. \n",
    "\n",
    "\n",
    "**A statement is a complete line of code that leads to an action.** \n",
    "\n",
    "Recall: **An expression is a piece of code that evaluates to some value.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Arithmetic Operators\n",
    "\n",
    "Consider variables `a` and `b` of the `int` type."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "| symbol | example use | definition | \n",
    "|--------|-------------|------------|\n",
    "| `+`    | `a + b`     | add `b` to `a`         |\n",
    "| `-`    | `a - b`     | subtract `b` from `a`  |\n",
    "| `*`    | `a * b`     | multiply `a` by `b`    |\n",
    "| `/`    | `a / b`     | divide `a` by `b`      |\n",
    "| `//`   | `a // b`    | divide `a` by `b` *using integer arithmetic* |\n",
    "| `%`    | `a % b`     | remainder of `a / b` |\n",
    "| `**`   | `a**b`      | raise `a` to the power of `b` |\n",
    "| `^`    | `a^b`       | [bitwise exclusive or](https://docs.python.org/3/reference/expressions.html?highlight=xor#binary-bitwise-operations) |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [],
   "source": [
    "a = 6 + 4 * 3 ** 2 / 4 # What's the result?\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "b = 11 % 3 # what's the result?\n",
    "b"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Relational Operators\n",
    "\n",
    "Comparisons can be made between two variables `a` and `b`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "| symbol | example use | definition | \n",
    "|--------|-------------|------------|\n",
    "| `==`    | `a == b`     | `a` equal to `b` yields `True` |\n",
    "| `!=`    | `a != b`     | `a` not equal to `b` yields `True` |\n",
    "| `>`    | `a > b`     | `a` greater than `b` yields `True` |\n",
    "| `>=`   | `a >= b`    | `a` greater than or equal to `b` yields `True` |\n",
    "| `<`   | `a < b`    | `a` less than `b` yields `True` |\n",
    "| `<=`   | `a <= b`    | `a` less than or equal to `b` yields `True` |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [],
   "source": [
    "a = 5 \n",
    "b = 7\n",
    "a == b # What is printed?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Exploring Built-In Functions\n",
    "\n",
    "**Goal**: be able to use Python as a powerful, interactive calculator. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "We need next is some of the typical mathematical *functions*.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['__doc__',\n",
       " '__file__',\n",
       " '__loader__',\n",
       " '__name__',\n",
       " '__package__',\n",
       " '__spec__',\n",
       " 'acos',\n",
       " 'acosh',\n",
       " 'asin',\n",
       " 'asinh',\n",
       " 'atan',\n",
       " 'atan2',\n",
       " 'atanh',\n",
       " 'ceil',\n",
       " 'copysign',\n",
       " 'cos',\n",
       " 'cosh',\n",
       " 'degrees',\n",
       " 'e',\n",
       " 'erf',\n",
       " 'erfc',\n",
       " 'exp',\n",
       " 'expm1',\n",
       " 'fabs',\n",
       " 'factorial',\n",
       " 'floor',\n",
       " 'fmod',\n",
       " 'frexp',\n",
       " 'fsum',\n",
       " 'gamma',\n",
       " 'gcd',\n",
       " 'hypot',\n",
       " 'inf',\n",
       " 'isclose',\n",
       " 'isfinite',\n",
       " 'isinf',\n",
       " 'isnan',\n",
       " 'ldexp',\n",
       " 'lgamma',\n",
       " 'log',\n",
       " 'log10',\n",
       " 'log1p',\n",
       " 'log2',\n",
       " 'modf',\n",
       " 'nan',\n",
       " 'pi',\n",
       " 'pow',\n",
       " 'radians',\n",
       " 'sin',\n",
       " 'sinh',\n",
       " 'sqrt',\n",
       " 'tan',\n",
       " 'tanh',\n",
       " 'tau',\n",
       " 'trunc']"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import math\n",
    "dir(math)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [],
   "source": [
    "help(math)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "Consider a right triangle whose sides are length 3, 4, and 5.  One angle is 90 degrees. What are the other angles?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "A = 3\n",
    "B = 4\n",
    "C = 5\n",
    "angle_AC = \n",
    "angle_BC = "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## A first program"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A computer *program* is a sequence of instruction statements to perform a task."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A good programmer *designs* a program"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Flowcharts\n",
    "\n",
    "A **flowchart** is a visual design tool for designing and understanding computer programs. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "![Flowchart for Computing Volume of a Sphere](img/volume_flowchart.png)\n",
    "\n",
    "A flowchart for computing the volume of a sphere, $V = 4\\pi r^3/3$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "This simple flowchart highlights a few of the key features we'll use later on in flowcharts:\n",
    "\n",
    "- *arrows* represent the flow of the program from one block to the next\n",
    "- *ovals* represent the beginning and ending of a program\n",
    "- *parallelograms* represent input from a user or output to a user\n",
    "- *rectangles* represent an action taken by the program (which might correspond to several, executed instructions)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Recap\n",
    "\n",
    "You should now be able to\n",
    "\n",
    "- *add, subtract, multiply, and divide* two quantities\n",
    "- *use the `help()` function to understand how to use another function*\n",
    "- *use `dir()` and the `variable explorer` to see defined variables and their values*\n",
    "- *explain the difference between statement and expression*\n",
    "- *write a short, well-commented program*"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Slideshow",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  },
  "livereveal": {
   "scroll": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
