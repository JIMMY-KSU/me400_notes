{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Lecture 27 - Solving First-Order IVPs Numerically\n",
    "\n",
    "## Overview, Objectives, and Key Terms\n",
    " \n",
    "The basics of ODEs were reviewed in [Lecture 26](ME400_Lecture_26.ipynb). There, SymPy was used to provide general solutions via `dsolve`, leaving application of initial and boundary conditions to the user.  However, SymPy (and other symbolic tools) cannot solve all differential equations.  For such equations, we can apply numerical techniques.  Specifically, we'll apply the finite-difference approximations presented in [Lecture 19](ME400_Lecture_19.ipynb).  For now, we'll consider only single, first-order equations, leaving systems for [Lecture 28](ME400_Lecture_28.ipynb).\n",
    "\n",
    "\n",
    "### Objectives\n",
    "\n",
    "By the end of this lesson, you should be able to\n",
    "\n",
    "- Solve first-order IVPs numerically using forward and backward Euler's method\n",
    "- Explain what is mean by local and global errors\n",
    "- Explain what is meant by stability and how to achieve it\n",
    "\n",
    "### Prerequisites\n",
    "\n",
    "You should already be able to\n",
    "\n",
    "- Solve ODEs based on what you've learned in a course like MATH 340 and [Lecture 26](ME400_Lecture_26.ipynb)\n",
    "- Compute a first-order, finite-difference approximation for $\\frac{df}{dx}$\n",
    "\n",
    "### Key Terms\n",
    "\n",
    "- Euler's method\n",
    "- forward Euler\n",
    "- backward Euler\n",
    "- Heun's (improved Euler's) method\n",
    "- local error\n",
    "- global error\n",
    "- stable method\n",
    "- `scipy.integrate.odeint`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## There Once was a Man Named Euler\n",
    "\n",
    "[Leonhard Euler](https://en.wikipedia.org/wiki/Leonhard_Euler) was a prolific mathematician, perhaps second only to [Carl Gauss](https://en.wikipedia.org/wiki/Carl_Friedrich_Gauss).  I point him out because the simplest (and probably best known) approach for solving $y' + py = q$ has his name.  (Point of trivia: he's buried in St. Petersburg, I was quite surprised to learn while strolling through an old cemetery).\n",
    "\n",
    "The method bearing his name requires the [Numerical Differentiation](../../../courses/pythonic_apps_1/module_4/numerical_differentiation.rst) we learned previously.  Specifically, we need one of the first-order, finite-difference approximations for $dy/dt$.  You'll recall those are the *forward difference*\n",
    "\n",
    "$$\n",
    "    \\frac{dy}{dt} \\approx \\frac{y(t+\\Delta)-y(t)}{\\Delta} \\, ,\n",
    "$$\n",
    "\n",
    "and the *backward difference*\n",
    "\n",
    "$$\n",
    "    \\frac{dy}{dt} \\approx \\frac{y(t)-y(t-\\Delta)}{\\Delta} \\, .\n",
    "$$\n",
    "\n",
    "If we substitute the forward difference into the IVP, we find\n",
    "\n",
    "$$\n",
    "    \\frac{y(t+\\Delta)-y(t)}{\\Delta} + p(t)y(t) = q(t) + \\mathcal{O}(\\Delta^2) \\, ,\n",
    "$$\n",
    "\n",
    "and by collecting the terms with $y(t)$ on the left, we have\n",
    "\n",
    "$$\n",
    "    y(t+\\Delta) = [1 - \\Delta p(t)]y(t)  + \\Delta q(t)  + \\mathcal{O}(\\Delta)  \\, .\n",
    "$$\n",
    "\n",
    "Recognize that $y$ is now evaluated at the points $t_0, t_0+\\Delta, t_0+2\\Delta, \\ldots$, or\n",
    "\n",
    "$$\n",
    "    t_n = t_0 + n\\Delta, \\qquad n = 0, 1, 2, \\ldots\n",
    "$$\n",
    "\n",
    "We could allow for a $\\Delta$ that changes, but we'll keep it fixed for simplicity and leave the fancy stuff to SciPy.  Furthermore, let $y(t_{n})$ be written as $y_n$. Then, we can rewrite our *finite-difference* equation as\n",
    "\n",
    "$$\n",
    "    y_{n+1} = (1 - \\Delta p_n)y_n  + \\Delta q_n \\, ,\n",
    "$$\n",
    "\n",
    "which is the *forward Euler method*.  Use of the backward difference leads to the *backward Euler method*\n",
    "\n",
    "$$\n",
    "    y_{n+1}  = (1 + \\Delta p_{n+1})^{-1} ( y_n + \\Delta q_{n+1}) \\, ,\n",
    "$$\n",
    "\n",
    "which is a *stable* time-integration scheme for IVP's.  For both methods, the $\\mathcal{O}(\\Delta^2)$ error in the derivative leads to a a *local error* of $\\mathcal{O}(\\Delta)$ in the solution.\n",
    "\n",
    "How high should $n$ go?  It depends on how long into the future (taking $t$ to represent time) we wish to evaluate the solution.  Let that future time be denoted $T$, and let the number of steps we wish to take be denoted $N$.  Consequently, $\\Delta = (T-t_0)/N$.  We'll always start at $t=0$, so $\\Delta = T/N$.\n",
    "\n",
    "Let's illustrate by solving\n",
    "\\begin{equation}\n",
    "    \\frac{dy}{dt} + y(t) = 10, \\qquad y(0) = 0, \\qquad t \\in [0, 10] \\, .\n",
    "\\end{equation}\n",
    "using $N=25$ points."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nmv8HoicM3TUiFagAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fa1882d0fd0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "t_max = 10.0\n",
    "N = 25\n",
    "\n",
    "# Initialize the unknown (where \"fe25\" denotes Forward Euler with 15 points)\n",
    "y_fe25 = np.zeros(N+1)\n",
    "\n",
    "# Define the times and right-hand side.  We use N+1 \n",
    "# because we want N points beyond the initial value.\n",
    "t_fe25 = np.linspace(0, t_max, N+1)\n",
    "q = 10*np.ones(N+1)\n",
    "Delta = t_fe25[1]-t_fe25[0]\n",
    "\n",
    "# Compute all successive values\n",
    "for i in range(1, N+1) :\n",
    "    y_fe25[i] = (1.0 - Delta)*y_fe25[i-1] + Delta*q[i-1]\n",
    "    \n",
    "plt.plot(t_fe25, y_fe25, 'k-o')\n",
    "plt.xlabel('t')\n",
    "plt.ylabel('$y(t)$')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Is this reasonable?  You should *always* do any \"sanity\" check available.  Here, the solution looks like it levels off, which suggests for long times, a *steady state* is reached.  Steady state means no change with time, and no change with time means $dy/dt = 0$.  \n",
    "\n",
    "So what happens if we set $dy/dt=0$ in our IVP?  We find that $y(t) = 10$.  That seems consistent with the numerical result, but is it correct?  This problem is easy to solve directly, but we'll have SymPy produce an analytic result that be evaluated numerically later on:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAF4AAAAUBAMAAAD2P5dXAAAAMFBMVEX///8AAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAVO8Qq5l2zWaJMt0i\nu0SCRuA9AAAACXBIWXMAAA7EAAAOxAGVKw4bAAABCklEQVQoFWNgIAWwLyBFNQODvQFp6qVJU350\nexRpGgqhypkjOxdg0Ykh/AeoiFGZgYFdgHkPmnpUYdm7QGDAp8DAYBLymYGhiYFhOqp6rMJsDjYM\nDGxA9VcYGOTRggqbMGvCBIj6LwwM7wVQLQCpRxfmc1sAVs/8Fag+AUM9VNgyLQZZCmgQz08GhvVA\nq5ABXJhvD8NJdAmg+djUg4UPCTCjxBLQILh7zHeDQBXIOLiwU1sGSlAAJUAek8fuX3kBoBwKAKm/\ny8DQj2IIJNjAwkC/oQCQemB8haMIQtSDhTWBbGQ5kHpuAWYtZDEgGy6czsCMHJ6sTt89GJinpSxA\nVY8QZgvrQJUiiQcA21tb+uUMZs8AAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$10 - 10 e^{- t}$$"
      ],
      "text/plain": [
       "         -t\n",
       "10 - 10⋅ℯ  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import sympy as sy\n",
    "sy.init_printing()\n",
    "y_sy, t_sy = sy.symbols('y t') # use y_sy, t_sy to avoid overwriting other names\n",
    "sol = sy.dsolve(sy.diff(y_sy(t_sy), t_sy) + y_sy(t_sy)-10, y_sy(t_sy)).rhs\n",
    "y_exact_sy = sol.subs(sy.Symbol('C1'), sy.solve(sol.subs(t_sy, 0), sy.Symbol('C1'))[0])\n",
    "y_exact_sy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "That certainly goes to 10 as $t \\to \\infty$.  Let's visualize the numerical and analytical solutions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nUUIJXUQkSvx/1rhjN23op5YAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fa1882ad5f8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_exact = sy.lambdify(t_sy, y_exact_sy)\n",
    "plt.plot(t_fe25, y_fe25, 'k-o', t_fe25, y_exact(t_fe25), 'r--')\n",
    "plt.xlabel('t')\n",
    "plt.legend(['$y_{\\\\mathrm{fe25}}$', '$y_{\\\\mathrm{exact}}(t)$'], loc=0)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "That's pretty close, but can we do better?  Let's try $N=100$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fa162fc3ba8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "N = 100\n",
    "\n",
    "# Initialize the unknown (where \"fe25\" denotes Forward Euler with 15 points)\n",
    "y_fe100 = np.zeros(N+1)\n",
    "\n",
    "# Define the times and right-hand side.  We use N+1 \n",
    "# because we want N points beyond the initial value.\n",
    "t_fe100 = np.linspace(0, t_max, N+1)\n",
    "q = 10*np.ones(N+1)\n",
    "Delta = t_fe100[1]-t_fe100[0]\n",
    "\n",
    "# Compute all successive values\n",
    "for i in range(1, N+1) :\n",
    "    y_fe100[i] = (1.0 - Delta)*y_fe100[i-1] + Delta*q[i-1]\n",
    "\n",
    "plt.plot(t_fe25, y_fe25, 'k-o', t_fe100, y_fe100, 'b', t_fe100, y_exact(t_fe100), 'r--')\n",
    "plt.xlabel('t')\n",
    "plt.legend(['$y_{\\\\mathrm{fe25}}$', '$y_{\\\\mathrm{fe100}}$', '$y_{\\\\mathrm{exact}}(t)$'], loc=0)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "\n",
    "**Exercise**:  Finish the following function definition:\n",
    "\n",
    "```python\n",
    "\n",
    "def forward_euler(N, T, y0, p, q) :\n",
    "    \"\"\"Solves y' + py = q using forward Euler and a fixed time step.\n",
    "    \n",
    "       Inputs:\n",
    "         N  - number of points (int)\n",
    "         T  - final time (float)\n",
    "         y0 - initial value of y (float)\n",
    "         p  - coefficient value (float)\n",
    "         q  - coefficient value (float)\n",
    "         \n",
    "       Returns:\n",
    "         y  - values of y at each time step (NumPy array)\n",
    "         t  - times at which y is evaluated (NumPy array)\n",
    "    \"\"\"\n",
    "\n",
    "    return y, t\n",
    "```\n",
    "\n",
    "***\n",
    "\n",
    "**Exercise**:  Repeat the last exercise but allow `p` and `q` to be callable functions of `t`.\n",
    "\n",
    "***\n",
    "\n",
    "**Exercise**: Implement backward Euler following the exercise above.\n",
    "\n",
    "***\n",
    "\n",
    "**Exercise**:  Apply forward Euler *by hand* to the following IVPs to approximate $y(1)$ using a step size $\\Delta = 0.2$:\n",
    "  1. $y' = y$ for $y(0) = 1$. \n",
    "  2. $y' = 2ty$ for $y(0) = 1$\n",
    "  3. $y' = -y/10 + 1$ for $y(0) = 0$.\n",
    "\n",
    "***\n",
    "\n",
    "**Exercise**: Repeat the previous exercise but use backward Euler.\n",
    "\n",
    "***\n",
    "\n",
    "**Exercise**:  Consider $y' = y$, $y(0) = 1$.  Of course, the solution is $y(x) = e^x$.  Let $\\Delta = 1/N$ and $x_i = \\Delta i$, where $N$ is some integer.  If $y_i$ is the approximation of $y(x)$ at $x = x_i$, then prove that $\\lim_{N\\to \\infty} y_N = e$ for both forward Euler and backward Euler.\n",
    "\n",
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "\n",
    "**Exercise**:  Consider the IVP $y' = f(t, y(t))$ subject to $y(0) = y_0$.  Here, $f(t, y(t))$ can be any function of $t$ or $y(t)$.  Examples include $f(t, y(t)) = ay + bt$ and $f(t, y(t)) = a y(t)^2$.  The latter case leads to a *nonlinear* IVP.  Given the initial condition, write down how you would determine $y(\\Delta)$ using (a) forward Euler and (b) backward Euler.\n",
    "\n",
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Exercise**:  Consider the following twist on Euler's method for $\\frac{dy}{dt} = f(t)$ using fixed time steps $\\Delta$:\n",
    "\n",
    "$$\n",
    "  \\tilde{y}_{n+1} = y_n + \\Delta f(t_n)\n",
    "$$\n",
    "\n",
    "and\n",
    "\n",
    "$$\n",
    "  y_{n+1} = y_n + \\frac{\\Delta}{2} [f(t_n) + \\tilde{f}(t_{n+1})] \\, .\n",
    "$$\n",
    "\n",
    "This is an example of a [multi-step method](https://en.wikipedia.org/wiki/Linear_multistep_method) and belongs to the famous [Runge-Kutta](http://mathworld.wolfram.com/Runge-KuttaMethod.html) family of methods.  This particular version is sometimes called [Heun's method](https://en.wikipedia.org/wiki/Heun%27s_method). \n",
    "\n",
    "Your task is to write a function `heun_method(N, T, y0, p, q)`.\n",
    "\n",
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## A Look at Errors and Stability\n",
    "\n",
    "Certainly, the $N=100$ approximation looks better than the $N=25$ approximation. We can plot the errors for both as a function of time:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nENng4wPPPAN16pjH/ftDeLj1dYUKFCjAlClTmDVrFrt378bhcDB79mxrgxK2IwlACCdq1AiOHYNa\nteA//4Hjx62N57HHHmP79u0EBwcTHR1N165d+fvvv60NStiGJAAhnKhNG7OArFs3GDMGQkIgKcna\nmMqVK8e6det45ZVXmDp1KmFhYVJUTgBuTABKqXZKqclKqYVKqSbualcIdytUCN5/H9atM9tRFitm\ndUSQJ08e3njjDVauXMlff/1FREQEY8eOlTUDXi5LCUApNUUpdUQptfOK482UUt8qpfYppfrd6Bxa\n6wVa62eBGOCx245YCA9Rrx5s3fpPcbnYWJg929opow0aNCAtLY2mTZvSp08fWrduzVE7lT8VbpXV\nK4AEoNnlB5RSuYAJQHMgGOiolApWSoUopRKvuJW47Fdfvfh7QuR4Spmff/1lNqaPjoZ27eDHH62L\nqVixYixcuJDx48ezYsUKQkNDWblypXUBCctkKQFordcBVy4trAns01rv11qfAWYBbbXWO7TWra64\nHVHG28CXWuutzn0bQtjbnXfCpk3wzjuwbJmpMjp5snVXA0opevTowebNmylUqBCNGzemf//+smbA\ny2RnDKAUcPCyxxkXj11PTyAKeEQp9dz1XqSUilVKpSilUuTSVOQkuXNDXJzZhrJGDbOY7PffrY0p\nNDSUlJQUnnnmGYYPH07dunXZv3+/tUEJt8lOAlDXOHbd7zNa63Fa6zCt9XNa60k3eF281jpcax1e\nPLM4uxA5SFCQWUCWlARFipjictOmmT2KreDn50d8fDxz5szh22+/pXr16syaNcuaYIRbZScBZACl\nL3scAPyUvXCE8A5KmT0HwNQUiomB2rVh1y7rYnr00UdJS0ujSpUqdOzYUdYMeIHsJIAtQAWlVDml\nVF4gGljkjKBkS0jhTdq3h08+gf37oXp1GDoUrOqKL1u2LGvXrmXAgAFMnTqV8PBw0tPTrQlGuFxW\np4F+CmwCKiqlMpRSXbXW54AewFJgDzBHa+2U7y+yJaTwJkpBx45mAVn79vD66/Dkk9bFkydPHoYN\nG/avjegnTJggawZyIGXHf1SlVGugdVBQ0LN79+61Ohwh3GrRIvD3N/sPnDhh6g35+loTy5EjR4iJ\nieHLL7+kXbt2fPTRR9x1113WBCOyTCmVqrUOv9nrbFkKQq4AhDdr0+afzWf69TPdQps2WRNLiRIl\n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\nA1CtN/fWv8gKAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fa162f89358>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "error_fe25 = y_fe25 - y_exact(t_fe25)\n",
    "error_fe100 = y_fe100 - y_exact(t_fe100)\n",
    "plt.semilogy(t_fe25, error_fe25, 'k-', t_fe100, error_fe100, 'b--')\n",
    "plt.xlabel('t')\n",
    "plt.legend(['$N=25$', '$N=100$'], loc=0, numpoints=1)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Clearly, the error for $N=25$ is larger over the time domain, as we might expect.  Recall that \n",
    "$(y_{n+1}-y_n)/\\Delta = -py_n + q_n + \\mathcal{O}(\\Delta^2)$, so $y_{n+1} = (1-\\Delta p)y_n + \\Delta q_n + \\mathcal{O}(\\Delta)$.  This first-order error in $y_n$ is the *local error*, i.e., the error introduced by a single step in time.  On the other hand, the *global error* is the error shown above as a function of time.  A key question is how that global error at a fixed point in time depends on $\\Delta$.  It turns out that if a method is *stable*, then the global error is of the same order as the local error.  \n",
    "\n",
    "We'll skip momentarily what it means to be stable for now, but we can attack the global error for our simple problem (with a bit of help from SymPy).  For constant $q$, $p$ and $\\Delta$, the analytic solution is\n",
    "\\begin{equation}\n",
    "    y_n = \\frac{q}{p} (1 - e^{-p \\Delta n})  \\, ,\n",
    "\\end{equation}\n",
    "while the forward-Euler solution is\n",
    "\\begin{equation}\n",
    "    \\begin{aligned}\n",
    "     y_n  &= \\Delta q \\sum^{n-1}_{i=0} (1-\\Delta p)^{i} \\\\\n",
    "          &= \\Delta q \\frac{1 - (1-\\Delta p)^{n-1}}{\\Delta p } \\\\\n",
    "          &= \\frac{q}{p} [ 1 - (1-\\Delta p)^{n-1} ] \\, .\n",
    "    \\end{aligned}\n",
    "\\end{equation}\n",
    "\n",
    "For fixed $t$ and $\\Delta$, the number of steps is $n = t/\\Delta$, and the global error is therefore\n",
    "\\begin{equation}\n",
    "     e(t) = \\frac{q}{p} [e^{-p t}-(1-\\Delta p)^{\\frac{t}{\\Delta} - 1} ] \\, .\n",
    "\\end{equation}\n",
    "Note first that \n",
    "\\begin{equation}\n",
    "     \\lim_{\\Delta \\to 0} (1-\\Delta p)^{t/\\Delta} = e^{-p t} \\, ,\n",
    "\\end{equation}\n",
    "so $e_n = (q/p)[e^{-pt}-e^{-p/t}/(1-\\Delta p)] \\to 0$ as $\\Delta \\to 0$.  However, for fixed $t$, how *fast* does that error decrease with $\\Delta$?  And for fixed $\\Delta$, how does the error change with time?  Let's expand the error about $\\Delta = 0$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$\\Delta \\left(\\frac{p q}{2} t e^{- p t} - q e^{- p t}\\right) + \\mathcal{O}\\left(\\Delta^{2}\\right)$$"
      ],
      "text/plain": [
       "  ⎛       -p⋅t          ⎞        \n",
       "  ⎜p⋅q⋅t⋅ℯ          -p⋅t⎟    ⎛ 2⎞\n",
       "Δ⋅⎜─────────── - q⋅ℯ    ⎟ + O⎝Δ ⎠\n",
       "  ⎝     2               ⎠        "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y0, Delta, n, p, q = sy.symbols('y0 Delta n p, q')\n",
    "e = (q/p)*(sy.exp(-p*t_sy)-(1-Delta*p)**(t_sy/Delta-1))\n",
    "sy.series(e, Delta, 0, 2)\n",
    "#e"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Evidently, the global error is of first order, consistent with the local error.  However, it's not clear (or easy to determine) exactly how the error depends on $t$ for fixed $\\Delta$.  If we assume $p > 0$ (i.e., radioactive decay and not multiplying pythons), then \n",
    "\\begin{equation}\n",
    "    |e(t)| < \\Big | q/ p \\Big | \\Big | (1-\\Delta p)^{t/\\Delta -1} \\Big | \\, .\n",
    "\\end{equation}\n",
    "However, the right-hand side is bounded (i.e., does not grow with large $t$) only if $|1-\\Delta p| < 1$, and that is true only if $\\Delta < 2/p$.  To summarize: the global error does not blow up as long as $p > 0$ and $\\Delta < 2/p$.\n",
    "\n",
    "Of course, simply stating such rules is never as exciting as seeing what happens when the rules are broken, so we'll solve our example with $p = 2$, $q=10$, and $y(0) = 0$ for $N = 5$, $N = 10$, and $N = 20$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nxBhjTK38f+e+0m/TWyRhAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fa162c7e860>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "p = 2.0\n",
    "q = 10.0\n",
    "t = {}\n",
    "y = {}\n",
    "y0 = 0\n",
    "for N in [5, 10, 20]:\n",
    "    t[N] = np.linspace(0, 10, N+1)\n",
    "    Delta = t[N][1]-t[N][0]\n",
    "    y[N] = np.zeros(N+1)\n",
    "    y[0] = y0\n",
    "    for i in range(1, N+1):\n",
    "        y[N][i] = (1.0 - Delta*p)*y[N][i-1] + Delta*q\n",
    "    \n",
    "plt.plot(t[5], y[5], 'k-o', t[10], y[10], 'b-s', t[20], y[20], 'r-*')\n",
    "plt.xlabel('t')\n",
    "plt.ylabel('y(t)')\n",
    "plt.legend(['$N=5$', '$N=10$',  '$N=20$'], loc=0)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Yikes! The $N=5$ case clearly does not converge to the steady-state value $y = 5$!  In other words, it *diverges*.  Because the forward-Euler approximation converges only for certain values of $\\Delta$ and $p$, it is called a *conditionally stable* method.  \n",
    "\n",
    "Conditional stability requires very small $\\Delta$.  For problems whose solutions blow up (i.e., $p < 0$), all bets are off and an *unconditionally stable* method is the better choice. For example, the backward-Euler approximation is unconditionally stable, demonstration of which is an exercise left to the student.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "\n",
    "**Exercise**:  Repeat the example above (i.e., $p=2$, $q=10$, $y(0) = 0$, and $N = 5, 10, 20$) to show that backward Euler has no stability issues.\n",
    "\n",
    "***\n",
    "\n",
    "**Exercise**:  Use *backward Euler* to solve $y' = 2t - 3y + 1$ given $y(1) = 5$ and estimate $y(1.2)$.  Compare the error in this estimate for $\\Delta = 0.1, 0.01, 0.001, 0.0001$.  How does this error depend on $\\Delta$? \n",
    "\n",
    "***\n",
    "\n",
    "**Exercise**:  Repeat the previous exercise using Heun's method (see previous exercise).\n",
    "\n",
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## IVP's with SciPy\n",
    "\n",
    "SciPy includes a number of schemes for integration (e.g., the `scipy.integrate.quad` function we have previously used).  The `scipy.integrate` module also has routines for integrating IVP's.  To \"integrate\" a differential equation is to solve for the unknown function.\n",
    "\n",
    "Specifically, the `scipy.integrate.odeint` function is used to solve individual, first-order IVP's or systems of such equations. We'll focus only on the former, leaving systems for next time.\n",
    "Behind the scenes, either an [Adams](https://en.wikipedia.org/wiki/Linear_multistep_method#Adams.E2.80.93Moulton_methods) or [BDF](https://en.wikipedia.org/wiki/Backward_differentiation_formula) method is used depending on the behavior of the solution.  All of this is automatic, and more details can be found [in the documentation](http://docs.scipy.org/doc/scipy-0.17.0/reference/generated/scipy.integrate.odeint.html#scipy.integrate.odeint). \n",
    "\n",
    "Let's revisit our example, namely $y' + y(t) = 10$ with $y(0)=0$ for $t\\in [0, 10]$.  The `odeint` function requires, at a minimum, three inputs: (1) a function that evaluates the derivative $y'(t)$ given the time $t$ and the value of the function $f(t)$,  (2) the initial condition $y(0)=y_0$, and (3) the times at which $y(t)$ is to be evaluated.  These times are independent of the times and corresponding $\\Delta$'s used internally; they only are used for the output.\n",
    "\n",
    "The derivative function has two arguments: the time $t$ at which $y'$ is to be evaluated, and the value of $y$ at that same time.  That sounds like you need to know $y(t)$ beforehand---but you don't!  This derivative function is only called behind the scenes by `odeint` itself.  Hence, `odeint` knows (or has an approximation to) $y$ at the time $t$, and your job is to use the two to define $y'$.  For our example, that means we need a function that evaluates and returns\n",
    "\\begin{equation}\n",
    "    \\frac{dy}{dt} = 10 - y(t) \\, .\n",
    "\\end{equation}\n",
    "\n",
    "With that, we can implement a complete `odeint` solution to our example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fa162c01198>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from scipy.integrate import odeint\n",
    "\n",
    "# derivative function\n",
    "def y_prime(y, t) :\n",
    "    return 10.0 - y\n",
    "\n",
    "# times at which y(t) is to be evaluated\n",
    "t_odeint = np.linspace(0, 10)\n",
    "\n",
    "# solve with odeint\n",
    "y_odeint = odeint(y_prime, y0=0.0, t=t_odeint)\n",
    "\n",
    "plt.plot(t_odeint, y_odeint, 'k', t_odeint, y_exact(t_odeint), 'ro')\n",
    "plt.legend(['$y_{\\\\mathrm{odeint}}$', '$y_{\\\\mathrm{exact}}$'], loc=0, numpoints = 1)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `odeint` result is very good, with no discernible error (to my eyes, anyway).  We can plot the errors, but first we need to reshape the output from `odeint`.  Notice that it has an explicit, 2-D shape, whereas `y_exact` yields a 1-D array (from the 1-D `t_odeint`):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(50, 1)\n",
      "(50,)\n",
      "(50,)\n"
     ]
    }
   ],
   "source": [
    "print(y_odeint.shape)\n",
    "print(y_exact(t_odeint).shape)\n",
    "print(t_odeint.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Normally, this apparent mismatch is no big deal---we plotted both against the same `t_odeint` array.  However, the mismatch does lead to strange results when we try to compute the error:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(50, 50)\n"
     ]
    }
   ],
   "source": [
    "error = y_odeint-y_exact(t_odeint)\n",
    "print(error.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "That's not right---can you figure out why that is happening?  The solution, however, is to make them the same size, and we can do that, e.g., with an explicit reshaping:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(50,)\n"
     ]
    }
   ],
   "source": [
    "y_odeint_reshaped = y_odeint.reshape((len(t_odeint),))\n",
    "error = y_odeint_reshaped - y_exact(t_odeint)\n",
    "print(error.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fa162c48358>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(t_odeint, error, 'r-o')\n",
    "plt.xlabel('t')\n",
    "plt.ylabel('$y_{\\\\mathrm{odeint}}-y_{\\\\mathrm{exact}}$')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Two features of this error warrant discussion.  First, the overall magnitude is small than the errors we found using $N=100$ above with forward Euler.  Second, the error fluctuates more than we found for forward Euler and is more uniform in magnitude.  The overall magnitude of the error is determined by the desired numerical accuracy (defined by the optional arguments `rtol` and `atol`).  The time-dependent fluctuations are due to use of nonuniform time steps.  The details are well beyond our scope, but you'll recall from the Taylor expansion of $y'$ that the errors are related to $y''$.  If some estimate can be made of $y''$ during the time-stepping procedure, then the error can also be estimated. Proper selection of $\\Delta$ (either larger or smaller) can yield errors just within the desired tolerance, ensuring proper accuracy and avoiding use of too many small steps in regions where they are not needed."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "\n",
    "**Exercise**: Solve the following IVPs using `odeint` and plot the result for $t \\in [0, 5]$:\n",
    "\n",
    "  1. $\\frac{dy}{dt} = e^{-y}$ for $y(0) = 0$. \n",
    "  2. $\\frac{dy}{dt} = x^2 + y^2$ for $y(0) = 1$. \n",
    "  3. $\\frac{dy}{dt} = y - y^2$ for $y(0) = 0.5$.\n",
    "\n",
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Further Reading\n",
    "\n",
    "See the SciPy documentation on [odeint](http://docs.scipy.org/doc/scipy/reference/tutorial/integrate.html#ordinary-differential-equations-odeint).  This will also be useful for the next lesson in which systems of IVP's (and higher-order IVP's) are solved.  Bennett's chapter on [population growth](https://www.math.ksu.edu/math240/book/chap1/pop.php) provides a bit more on first-order systems and their use in modeling populations."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
