{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Lecture 5 - Algorithms, flowcharts, and pseudocode. \n",
    "\n",
    "## Overview, Objectives, and Key Terms\n",
    " \n",
    "In this lesson, we'll dive right into the basic logic needed to plan one's program, significantly extending the process identified in [Lesson 2](ME400_Lecture_2.ipynb).  We'll examine *algorithms* for several applications and illustrate solutions using **flowcharts** and **pseudocode**.  Along the way, we'll see for the first time the three principal structures in programming logic: **sequence**, **selection**, and **iteration**.  Throughout, specialized syntax (Python or otherwise) is avoided (with the exception of the handy slicing syntax introduced in [Lesson 3](ME400_Lecture_3.ipynb)), but variables and simple operators are used.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Objectives\n",
    "\n",
    "By the end of this lesson, you should be able to\n",
    "\n",
    "- *define what an algorithm is*\n",
    "- *decompose problems into a sequence of simple steps*\n",
    "- *illustrate those steps graphically using flowcharts*\n",
    "- *describe those steps in words using pseudocode*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Key Terms\n",
    "\n",
    "- algorithm\n",
    "- sequence\n",
    "- selection \n",
    "- iteration\n",
    "- counter variable\n",
    "- index variable\n",
    "- condition\n",
    "- conditional statement\n",
    "- loop"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "Quick discussion of Homework 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Algorithm\n",
    "\n",
    "An *algorithm* is procedure by which a problem is solved following a certain set of rules.\n",
    "\n",
    "Do you have any favorites?\n",
    "\n",
    "We'll define algorithms using just *pseudocode* and *flowcharts*."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Sequence by Example: Computing Grades\n",
    "\n",
    " 1. homework - 20%\n",
    " 2. laboratories - 10%\n",
    " 3. quizzes - 10%\n",
    " 4. examinations - 60%\n",
    " \n",
    "Look familiar?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "```octave\n",
    "'''Algorithm for computing homework percentage'''\n",
    "# Get the inputs needed to compute the homework percentage\n",
    "Input hw_1_score, hw_2_score, hw_3_score, hw_4_score, \n",
    "      hw_5_score, number_hw, points_per_hw\n",
    "# Initialize the total homework score    \n",
    "Set total_score to 0\n",
    "# Increment the total homework score by each of the homework scores\n",
    "Increase total_score by hw_1_score\n",
    "Increase total_score by hw_2_score\n",
    "Increase total_score by hw_3_score\n",
    "Increase total_score by hw_4_score\n",
    "Increase total_score by hw_5_score\n",
    "# Determine the total number of points possible\n",
    "Set total_possible to points_per_hw multiplied by number_hw\n",
    "# Compute the homework percentage\n",
    "Set hw_percent to 100 * total_score / by total_possible\n",
    "# Provide the homework percentage\n",
    "Output hw_percent\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Flowchart for Computing Homework Percentage](img/homework_sequence.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "> **Exercise**:  For each line of the pseudocode above, write the value of `total_score`, `total_possible`, and `hw_percent`.  If a variable does not have a value at a particular line, then say it is *undefined*."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Selection\n",
    "\n",
    "Suppose we computed `hw_percent`, `lab_percent`, `quiz_percent`, and `exam_percent`.  Given the weight of each category, one could, using **sequence** compute a `final_percent`.  But how to assign the letter grade?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "Simplest selection: \n",
    "      \n",
    "```html\n",
    "If some condition is true, then \n",
    "    do something.\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "\n",
    "Graphically:\n",
    "\n",
    "![Flowchart fragment for a simple conditional statement](img/simple_if.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "```octave\n",
    "'''Algorithm to compute the final grade'''\n",
    "# Get the final percentage\n",
    "Input final_percent\n",
    "# Check if the grade is an A\n",
    "If final_percent >= 90 then\n",
    "    Set final_grade to A # Indentation helps tie the statement to the condition\n",
    "# Check if the grade is a B\n",
    "If final_percent < 90 and final_percent >= 80 then\n",
    "    Set final_grade to B\n",
    "# Check if the grade is a C\n",
    "If final_percent < 80 and final_percent >= 70 then\n",
    "    Set final_grade to C\n",
    "# Check if the grade is a B\n",
    "If final_percent < 70 and final_percent >= 60 then\n",
    "    Set final_grade to D\n",
    "# Check if an F\n",
    "If final_percent < 60 then\n",
    "    Set final_grade to F\n",
    "# Provide the final grade\n",
    "Output final_grade\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Iteration\n",
    "\n",
    "Think back to the scores (i.e., 10, 7, 9, 10,  and 10).  **What if the lowest score is dropped? **"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### The Basic Idea\n",
    "\n",
    "Assume homework grades are stored in an array  `hw_scores` (i.e., `hw_scores[0]` replaces `hw_1_score`).  From this array, we need to pick out which element represents the score to be dropped.  \n",
    "\n",
    "We need language to describe the process of *iterating* through the array elements, i.e., **iteration**.  In English, we might say something like \"for each score in the array, do something\".  (That's actually pretty Pythonic.  More general language uses *while*.)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "In pseudocode:\n",
    "\n",
    "```octave\n",
    "While the condition is satisfied\n",
    "  Do something\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "Graphically:\n",
    "\n",
    "![Flowchart fragment for a simple loop](img/simple_loop.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Example** Print the elements of an array."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "```octave\n",
    "'''Algorithm to print out the elements of an array'''\n",
    "Input a and n # where n is the length of array a\n",
    "Set i to 0\n",
    "While i < n\n",
    "    Print a[i]\n",
    "    Set i = i + 1\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "Back to the lowest homework:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Flowchart for finding the lowest grade](img/loop_find_min.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Practice Problems\n",
    "\n",
    "- Prepare a pot of coffee.\n",
    "- Prepare a cup of coffee for your friend. (Cream or sugar?)\n",
    "- String a guitar.  \n",
    "- Choose your outfit (making sure to account for the day of the week and the weather). \n",
    "- Determine the largest number in an array.\n",
    "- Determine the second largest number in an array.\n",
    "- Determine whether an integer is even.\n",
    "- Determine whether an integer is [prime](https://en.wikipedia.org/wiki/Prime_number).\n",
    "- Determine whether a given year is a [leap year](https://en.wikipedia.org/wiki/Leap_year).\n",
    "- Determine the next [leap year](https://en.wikipedia.org/wiki/Leap_year) after a given year.\n",
    "- Divide one number by another number using [long division](https://en.wikipedia.org/wiki/Long_division)\n",
    "- Determine the sum of an array of numbers.\n",
    "- Determine the sum of the elements of an array of numbers that are divisible by 3 and 5.\n",
    "- Given any two integers `n` and `d`, determine whether the quotient `n/d` leads to a finite decimal number (e.g., $5/4 = 1.25$) or an infinite decimal number (e.g., $1/3 = 0.3333\\ldots = 0.\\bar{3}$).\n",
    "- Extend the homework grade algorithm to drop the two lowest scores.\n",
    "- Determine a final grade in ME 400 following the course grading policies (including drops)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Recap\n",
    "\n",
    "You should now be able to\n",
    "\n",
    "- *define what an algorithm is*\n",
    "- *decompose problems into a sequence of simple steps*\n",
    "- *illustrate those steps graphically using flowcharts*\n",
    "- *describe those steps in words using pseudocode*"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Slideshow",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
